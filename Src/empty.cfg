/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var GateMutexPri = xdc.useModule('ti.sysbios.gates.GateMutexPri');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
Program.stack = 850;
}

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 128;
LoggingSetup.mainLoggerSize = 256;
LoggingSetup.sysbiosLoggerSize = 256;

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
BIOS.heapSize = 0;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "timeSharingClk";
clock0Params.startFlag = true;
clock0Params.period = 1;
Program.global.timeSharingClk = Clock.create("&tsClockHandler", 1, clock0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "ledSrvTask";
task0Params.priority = 6;
Program.global.ledSrvTask = Task.create("&ledSrvTaskHandler", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "vesselTask1";
task1Params.arg0 = 1;
Program.global.vesselTask1 = Task.create("&sailAway", task1Params);
var task0Params0 = new Task.Params();
task0Params0.instance.name = "vesselTask2";
task0Params0.arg0 = 2;
Program.global.vesselTask2 = Task.create("&sailAway", task0Params0);
var task3Params = new Task.Params();
task3Params.instance.name = "vesselTask3";
task3Params.arg0 = 3;
Program.global.vesselTask3 = Task.create("&sailAway", task3Params);
var task4Params = new Task.Params();
task4Params.instance.name = "vesselTask4";
task4Params.arg0 = 4;
task4Params.priority = 4;
Program.global.vesselTask4 = Task.create("&maintainCanal", task4Params);
var queue0Params = new Queue.Params();
queue0Params.instance.name = "ledSpecQ";
Program.global.ledSpecQ = Queue.create(queue0Params);
var event0Params = new Event.Params();
event0Params.instance.name = "vesselReqEvt";
Program.global.vesselReqEvt = Event.create(event0Params);
Clock.tickPeriod = 500;
var clock1Params = new Clock.Params();
clock1Params.instance.name = "barrierOppClk";
clock1Params.period = 2000;
Program.global.barrierOppClk = Clock.create("&bOppClockHandler", 2000, clock1Params);
var clock2Params = new Clock.Params();
clock2Params.instance.name = "barrierFifoClk";
clock2Params.period = 0;
Program.global.barrierFifoClk = Clock.create("&bFifoClockHandler", 4000, clock2Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "bOppQueueSem";
semaphore0Params.mode = Semaphore.Mode_COUNTING_PRIORITY;
Program.global.bOppQueueSem = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "bFifoQueueSem";
semaphore1Params.mode = Semaphore.Mode_COUNTING;
Program.global.bFifoQueueSem = Semaphore.create(null, semaphore1Params);
var gateMutexPri0Params = new GateMutexPri.Params();
gateMutexPri0Params.instance.name = "gateMutexPri0";
Program.global.gateMutexPri0 = GateMutexPri.create(gateMutexPri0Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "stopMaintSwi";
Program.global.stopMaintSwi = Swi.create("&stopMaintSwiHandler", swi0Params);
